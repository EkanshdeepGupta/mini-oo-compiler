
** Conflict (shift/reduce) in state 64.
** Tokens involved: WHILE VAR_DECL VAR SKIP MALLOC LBRACE IF ATOM
** The following explanations concentrate on token WHILE.
** This state is reached from prog after reading:

WHILE expr LT PROC_DECL VAR COLON cmd SEMICOLON 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

prog 
cmds EOF 
cmd SEMICOLON cmds 
(?)

** In state 64, looking ahead at WHILE, shifting is permitted
** because of the following sub-derivation:

WHILE boolean cmds 
      expr LT expr 
              PROC_DECL VAR COLON cmds 
                                  cmd SEMICOLON cmds 
                                                cmd SEMICOLON cmds 
                                                . WHILE boolean cmds 

** In state 64, looking ahead at WHILE, reducing production
** cmds -> 
** is permitted because of the following sub-derivation:

WHILE boolean cmds // lookahead token appears because cmds can begin with WHILE
      expr LT expr // lookahead token is inherited
              PROC_DECL VAR COLON cmds // lookahead token is inherited
                                  cmd SEMICOLON cmds // lookahead token is inherited
                                                . 

** Conflict (shift/reduce) in state 10.
** Tokens involved: WHILE VAR_DECL VAR SKIP MALLOC LBRACE IF ATOM
** The following explanations concentrate on token WHILE.
** This state is reached from prog after reading:

WHILE expr LT PROC_DECL VAR COLON 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

prog 
cmds EOF 
cmd SEMICOLON cmds 
(?)

** In state 10, looking ahead at WHILE, shifting is permitted
** because of the following sub-derivation:

WHILE boolean cmds 
      expr LT expr 
              PROC_DECL VAR COLON cmds 
                                  cmd SEMICOLON cmds 
                                  . WHILE boolean cmds 

** In state 10, looking ahead at WHILE, reducing production
** cmds -> 
** is permitted because of the following sub-derivation:

WHILE boolean cmds // lookahead token appears because cmds can begin with WHILE
      expr LT expr // lookahead token is inherited
              PROC_DECL VAR COLON cmds // lookahead token is inherited
                                  . 
